using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

class DataflowExecutionBlocks
{
	static int CountBytes(string path)
	{
		byte[] buffer = new byte[1024]
		int totalZeroBytesRead = 0;
		using(var fileStream = File.OpenRead(path))
		{
			int bytesRead = 0;
			do
			{
				bytesRead = fileStream.Read(buffer, 0, buffer.Length);
				totalZeroBytesRead += buffer.Count(b => b == 0);
			}while(bytesRead > 0);
		}
		return totalZeroBytesRead;
	}

	staic async Task<int> CountbytesAsync(string path)
	{
		byte[] buffer = new byte[1024]
		int totalZeroBytesRead = 0;
		using(var fileStream = File.OpenRead(path))
		{
			int bytesRead = 0;
			do
			{
				bytesRead = await fileStream.ReadAsync(buffer, 0, buffer.Length);
				totalZeroBytesRead += buffer.Count(b => b == 0);
			}while(bytesRead > 0);
		}
		return totalZeroBytesRead;
	}

	static void main(string[] args)
	{
		string tempFile = path.GetTempFileName();
		using(var fileStream = File.OpenWrite(tempFile))
		{
			Random rand = new Random();
			byte[] buffer = new byte[1024];
			for (int i = 0; i < 512; i++)
			{
				rand.NextBytes(buffer);
				fileStream.Write(buffer, 0, buffer.Length);
			}

		}

		var printResult =  new ActionBlock<int>(zeroBytesRead => 
		{
			Console.WriteLine("{0} contains {1} zero bytes.",
				Path.GetFileName(tempFile), zeroBytesRead);
		});

		var countBytes = new TransformBlock<string, int>(new Func<string, int>(CountBytes));
		countBytes.Completion.ContinueWith(delegate {printResult.Complete();});
		countBytes.Post(tempFile);
		countBytes.Complete();
		printResult.Completion.Wait();
		File.Delete(tempFile);
	}
}
